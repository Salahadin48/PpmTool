{"version":3,"sources":["components/project/ProjectItem.js","components/project/AddProject.js","actions/ProjectActions.js","actions/types.js","components/project/CreateProjectButton.js","components/Dashboard.js","components/Header.js","reducers/errorReducer.js","reducers/projectReducer.js","reducers/index.js","store.js","components/project/UpdateProject.js","App.js","serviceWorker.js","index.js"],"names":["ProjectItem","project","this","props","className","projectIdentifier","projectName","projectDescription","href","to","Component","AddProject","state","errors","onChange","bind","onSubmit","nextProps","nextContext","setState","event","target","name","value","preventDefault","newProject","projectStartDate","projectEndDate","console","log","createProject","history","type","classnames","placeholder","protoTypes","PropTypes","func","isRequired","object","connect","dispatch","a","axios","post","push","payload","response","data","CreateProjectButton","Fragment","Dashboard","getProjects","projects","map","key","id","get","result","Header","data-toggle","data-target","initialState","combineReducers","action","middleware","thunk","store","window","navigator","userAgent","includes","createStore","rootReducer","compose","applyMiddleware","__REDUX_DEVTOOLS_EXTENSION__","UpdateProject","match","params","getProject","disabled","App","exact","path","component","Boolean","location","hostname","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.88eaa2f3.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport {Link} from \"react-router-dom\";\n\nclass ProjectItem extends Component {\n\n    render() {\n        const {project} = this.props;\n\n        return (\n            <div className=\"container\">\n                <div className=\"card card-body bg-light mb-3\">\n                    <div className=\"row\">\n                        <div className=\"col-2\">\n                            <span className=\"mx-auto\">{project.projectIdentifier}</span>\n                        </div>\n                        <div className=\"col-lg-6 col-md-4 col-8\">\n                            <h3>{project.projectName}</h3>\n                            <p>{project.projectDescription}</p>\n                        </div>\n                        <div className=\"col-md-4 d-none d-lg-block\">\n                            <ul className=\"list-group\">\n                                <a href=\"#\">\n                                    <li className=\"list-group-item board\">\n                                        <i className=\"fa fa-flag-checkered pr-1\">  Project Board </i>\n                                    </li>\n                                </a>\n                                <Link to={`/updateProject/${project.projectIdentifier}`}>\n                                    <li className=\"list-group-item update\">\n                                        <i className=\"fa fa-edit pr-1\">  Update Project Info</i>\n\n                                    </li>\n                                </Link>\n                                <a href=\"\">\n                                    <li className=\"list-group-item delete\">\n                                        <i className=\"fa fa-minus-circle pr-1\">  Delete Project</i>\n                                    </li>\n                                </a>\n                            </ul>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default ProjectItem;\n","import React, {Component} from 'react';\nimport PropTypes from \"prop-types\"\nimport {connect} from \"react-redux\"\nimport {createProject} from \"../../actions/ProjectActions\"\nimport classnames from \"classnames\"\n\nclass AddProject extends Component {\n\n    constructor() {\n        super();\n        this.state = {\n            \"projectName\": \"\",\n            \"projectIdentifier\": \"\",\n            \"projectDescription\": \"\",\n            \"projectStartDate\": \"\",\n            \"projectEndDate\": \"\",\n            errors: {}\n        };\n\n        this.onChange = this.onChange.bind(this);\n        this.onSubmit = this.onSubmit.bind(this);\n    }\n\n    // life cycle hooks\n    componentWillReceiveProps(nextProps, nextContext) {\n        if (nextProps.errors) {\n            this.setState({errors: nextProps.errors});\n        }\n    }\n\n    onChange(event) {\n        this.setState({[event.target.name]: event.target.value});\n    }\n\n    onSubmit(event) {\n        event.preventDefault();\n        const newProject = {\n            \"projectName\": this.state.projectName,\n            \"projectIdentifier\": this.state.projectIdentifier,\n            \"projectDescription\": this.state.projectDescription,\n            \"projectStartDate\": this.state.projectStartDate,\n            \"projectEndDate\": this.state.projectEndDate,\n        }\n        console.log(newProject);\n        this.props.createProject(newProject, this.props.history)\n    }\n\n    render() {\n        const {errors} = this.state;\n\n        return (\n            <div>\n                <div className=\"project\">\n                    <div className=\"container\">\n                        <div className=\"row\">\n                            <div className=\"col-md-8 m-auto\">\n                                <h5 className=\"display-4 text-center\">Create Project form</h5>\n                                <hr/>\n                                <form onSubmit={this.onSubmit}>\n                                    <div className=\"form-group\">\n                                        <input type=\"text\"\n                                               className={classnames(\"form-control form-control-lg\", {\"is-invalid\": errors.projectName})}\n                                               placeholder=\"Project Name\"\n                                               name=\"projectName\"\n                                               value={this.state.projectName}\n                                               onChange={this.onChange}/>\n                                        {errors.projectName && (\n                                            <div className=\"invalid-feedback\">{errors.projectName}</div>\n                                        )}\n                                    </div>\n                                    <div className=\"form-group\">\n                                        <input type=\"text\"\n                                               className={classnames(\"form-control form-control-lg\", {\"is-invalid\": errors.projectIdentifier})}\n                                               placeholder=\"Unique Project ID\"\n                                               name=\"projectIdentifier\"\n                                               value={this.state.projectIdentifier}\n                                               onChange={this.onChange}/>\n                                        {errors.projectIdentifier && (\n                                            <div className=\"invalid-feedback\">{errors.projectIdentifier}</div>\n                                        )}\n                                    </div>\n\n                                    <div className=\"form-group\">\n                                        <textarea\n                                            className={classnames(\"form-control form-control-lg\", {\"is-invalid\": errors.projectDescription})}\n                                            placeholder=\"Project Description\"\n                                            name=\"projectDescription\"\n                                            value={this.state.projectDescription}\n                                            onChange={this.onChange}/>\n                                        {errors.projectDescription && (\n                                            <div className=\"invalid-feedback\">{errors.projectDescription}</div>\n                                        )}\n                                    </div>\n                                    <h6>Start Date</h6>\n                                    <div className=\"form-group\">\n                                        <input type=\"date\"\n                                               className={classnames(\"form-control form-control-lg\", {\"is-invalid\": errors.projectStartDate})}\n                                               name=\"projectStartDate\"\n                                               value={this.state.projectStartDate}\n                                               onChange={this.onChange}/>\n                                        {errors.projectStartDate && (\n                                            <div className=\"invalid-feedback\">{errors.projectStartDate}</div>\n                                        )}\n                                    </div>\n                                    <h6>Estimated End Date</h6>\n                                    <div className=\"form-group\">\n                                        <input type=\"date\"\n                                               className={classnames(\"form-control form-control-lg\", {\"is-invalid\": errors.projectEndDate})}\n                                               name=\"projectEndDate\"\n                                               value={this.state.projectEndDate}\n                                               onChange={this.onChange}/>\n                                        {errors.projectEndDate && (\n                                            <div className=\"invalid-feedback\">{errors.projectEndDate}</div>\n                                        )}\n                                    </div>\n\n                                    <input type=\"submit\" className=\"btn btn-primary btn-block mt-4\"/>\n                                </form>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nAddProject.protoTypes = {\n    createProject: PropTypes.func.isRequired,\n    errors: PropTypes.object.isRequired\n}\n\nconst mapSateToProps = state => ({\n    errors: state.errors\n});\n\nexport default connect(\n    mapSateToProps,\n    {createProject})(AddProject);\n","import axios from \"axios\";\nimport {GET_ERRORS, GET_PROJECT, GET_PROJECTS} from \"./types\";\n\nexport const createProject = (project, history) => async dispatch => {\n    try {\n        const result = await axios.post(\"http://localhost:8080/api/project\", project);\n        history.push(\"/dashboard\")\n    } catch (err) {\n        dispatch({\n            type: GET_ERRORS,\n            payload: err.response.data\n        })\n    }\n}\n\nexport const getProjects = () => async dispatch => {\n    const result = await axios.get(\"http://localhost:8080/api/project/all\");\n    dispatch({\n        type: GET_PROJECTS,\n        payload: result.data\n    });\n}\n\nexport const getProject = (id, history) => async dispatch => {\n    const result = await axios.get(`http://localhost:8080/api/project/${id}`);\n    dispatch({\n        type: GET_PROJECT,\n        payload: result.data\n    });\n}\n\n\n","export const GET_ERRORS = \"GET_ERRORS\";\nexport const GET_PROJECTS = \"GET_PROJECTS\";\nexport const GET_PROJECT = \"GET_PROJECT\";\n","import React from \"react\";\nimport {Link} from \"react-router-dom\";\nimport AddProject from \"./AddProject\";\n\nconst CreateProjectButton = () => {\n    return (\n        <React.Fragment>\n            <Link to=\"/addProject\" className=\"btn btn-lg btn-info\">\n                Create a Project\n            </Link>\n        </React.Fragment>\n    );\n}\n\nexport default CreateProjectButton;\n","import React, {Component} from 'react';\nimport ProjectItem from \"./project/ProjectItem\";\nimport \"bootstrap/dist/css/bootstrap.min.css\"\nimport CreateProjectButton from \"./project/CreateProjectButton\";\nimport {connect} from \"react-redux\";\nimport {getProjects} from \"../actions/ProjectActions\"\nimport PropTypes from \"prop-types\"\n\nclass Dashboard extends Component {\n\n    componentDidMount() {\n        this.props.getProjects();\n    }\n\n    render() {\n        const {projects} = this.props.project;\n        return (\n            <div className=\"projects\">\n                <div className=\"container\">\n                    <div className=\"row\">\n                        <div className=\"col-md-12\">\n                            <h1 className=\"display-4 text-center\">Projects</h1>\n                            <br/>\n                            <CreateProjectButton/>\n                            <br/>\n                            <hr/>\n                            {projects.map(project =>(\n                                <ProjectItem key={project.id} project={project}/>\n                            ))}\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nDashboard.propTypes = {\n    project: PropTypes.object.isRequired,\n    getProjects: PropTypes.func.isRequired\n}\n\nconst mapStateToProps = state => ({\n    project: state.project\n})\n\nexport default connect(\n    mapStateToProps,\n    {getProjects}\n)(Dashboard);\n","import React, {Component} from 'react';\n\nclass Header extends Component {\n    render() {\n        return (\n            <nav className=\"navbar navbar-expand-sm navbar-dark bg-primary mb-4\">\n                <div className=\"container\">\n                    <a className=\"navbar-brand\" href=\"resources/Dashboard.html\">\n                        Personal Project Management Tool\n                    </a>\n                    <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#mobile-nav\">\n                        <span className=\"navbar-toggler-icon\" />\n                    </button>\n\n                    <div className=\"collapse navbar-collapse\" id=\"mobile-nav\">\n                        <ul className=\"navbar-nav mr-auto\">\n                            <li className=\"nav-item\">\n                                <a className=\"nav-link\" href=\"/dashboard\">\n                                    Dashboard\n                                </a>\n                            </li>\n                        </ul>\n\n                        <ul className=\"navbar-nav ml-auto\">\n                            <li className=\"nav-item\">\n                                <a className=\"nav-link \" href=\"register.html\">\n                                    Sign Up\n                                </a>\n                            </li>\n                            <li className=\"nav-item\">\n                                <a className=\"nav-link\" href=\"login.html\">\n                                    Login\n                                </a>\n                            </li>\n                        </ul>\n                    </div>\n                </div>\n            </nav>\n        );\n    }\n}\n\nexport default Header;\n","import {GET_ERRORS} from \"../actions/types\";\n\nconst initialState = {};\n\nexport default function (state = initialState, action) {\n    switch (action.type) {\n        case GET_ERRORS:\n            return action.payload;\n        default:\n            return state;\n    }\n}\n","import {GET_PROJECT, GET_PROJECTS} from \"../actions/types\";\n\nconst initialState = {\n    projects: [],\n    project: {}\n}\n\nexport default function (state = initialState, action) {\n    switch (action.type) {\n        case GET_PROJECTS:\n            return {\n                ...state,\n                projects: action.payload\n            };\n        case GET_PROJECT:\n            return {\n                ...state,\n                project: action.payload\n            };\n\n        default:\n            return state;\n    }\n}\n","import {combineReducers} from \"redux\";\nimport errorReducer from \"./errorReducer\";\nimport projectReducer from \"./projectReducer\";\n\nexport default combineReducers({\n    errors: errorReducer,\n    project: projectReducer\n});\n","import {createStore, applyMiddleware, compose} from \"redux\";\nimport thunk from \"redux-thunk\";\nimport rootReducer from \"./reducers\"\n\nconst initialState = {}\nconst middleware = [thunk]\n\nlet store;\n\nif (window.navigator.userAgent.includes(\"Chrome\")) {\n    store = createStore(\n        rootReducer,\n        initialState,\n        compose(\n            applyMiddleware(...middleware),\n            window.__REDUX_DEVTOOLS_EXTENSION__ &&\n                    window.__REDUX_DEVTOOLS_EXTENSION__()));\n} else {\n    store = createStore(rootReducer, initialState,\n        compose(\n            applyMiddleware(...middleware)));\n}\n\nexport default store;\n","import React, {Component} from 'react';\nimport {getProject} from \"../../actions/ProjectActions\";\nimport PropTypes from \"prop-types\";\nimport {connect} from \"react-redux\";\nimport classnames from \"classnames\";\n\nclass UpdateProject extends Component {\n\n    componentDidMount() {\n        const {id} = this.props.match.params;\n        this.props.getProject(id, this.props.history);\n    }\n\n    render() {\n        const {project} = this.props;\n        return (\n            <div className=\"project\">\n                <div className=\"container\">\n                    <div className=\"row\">\n                        <div className=\"col-md-8 m-auto\">\n                            <h5 className=\"display-4 text-center\">Update Project form</h5>\n                            <hr/>\n                            <div className=\"form-group\">\n                                <input type=\"text\" className=\"form-control form-control-lg \"\n                                       placeholder=\"Project Name\"/>\n                            </div>\n                            <div className=\"form-group\">\n                                <input type=\"text\" className=\"form-control form-control-lg\"\n                                       placeholder=\"Unique Project ID\"\n                                       disabled/>\n                            </div>\n\n                            <div className=\"form-group\">\n                                <textarea className=\"form-control form-control-lg\"\n                                          placeholder=\"Project Description\"/>\n                            </div>\n                            <h6>Start Date</h6>\n                            <div className=\"form-group\">\n                                <input type=\"date\" className=\"form-control form-control-lg\" name=\"start_date\"/>\n                            </div>\n                            <h6>Estimated End Date</h6>\n                            <div className=\"form-group\">\n                                <input type=\"date\" className=\"form-control form-control-lg\" name=\"end_date\"/>\n                            </div>\n\n                            <input type=\"submit\" className=\"btn btn-primary btn-block mt-4\"/>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nUpdateProject.propTypes = {\n    getProject: PropTypes.func.isRequired,\n    project: PropTypes.object.isRequired\n}\n\nconst mapStateToProps = state => ({\n    project: state.project.project\n})\n\n\nexport default connect(\n    mapStateToProps,\n    {getProject})(UpdateProject);\n","import React, {Component} from 'react';\nimport './App.css';\nimport Dashboard from \"./components/Dashboard\";\nimport Header from \"./components/Header\";\nimport {BrowserRouter as Router, Route} from \"react-router-dom\";\nimport AddProject from \"./components/project/AddProject\";\nimport {Provider} from \"react-redux\"\nimport store from \"./store\";\nimport UpdateProject from \"./components/project/UpdateProject\";\n\nclass App extends Component {\n\n    render() {\n        return (\n            <Provider store={store}>\n                <Router>\n                    <div className=\"App\">\n                        <Header/>\n                        <Route exact path=\"/dashboard\" component={Dashboard}/>\n                        <Route exact path=\"/addProject\" component={AddProject}/>\n                        <Route exact path=\"/updateProject/:id\" component={UpdateProject}/>\n                    </div>\n                </Router>\n            </Provider>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}